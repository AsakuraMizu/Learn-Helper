// Generated by IcedCoffeeScript 1.4.0c
(function() {
  var CONST, URL_CONST, db_fixOldMess, db_get, db_getUsername, db_saveToken, db_set, db_updateCourseList, errorEnum, errorHandler, iced, net_getCourseList, net_login, net_submitServer, old_db_getPassword, old_db_getUsername, old_db_saveToken, parser, result, state, version_control, __iced_deferrals, __iced_k, __iced_k_noop,
    __slice = [].slice,
    _this = this;

  iced = {
    Deferrals: (function() {

      function _Class(_arg) {
        this.continuation = _arg;
        this.count = 1;
        this.ret = null;
      }

      _Class.prototype._fulfill = function() {
        if (!--this.count) return this.continuation(this.ret);
      };

      _Class.prototype.defer = function(defer_params) {
        var _this = this;
        ++this.count;
        return function() {
          var inner_params, _ref;
          inner_params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          if (defer_params != null) {
            if ((_ref = defer_params.assign_fn) != null) {
              _ref.apply(null, inner_params);
            }
          }
          return _this._fulfill();
        };
      };

      return _Class;

    })(),
    findDeferral: function() {
      return null;
    },
    trampoline: function(_fn) {
      return _fn();
    }
  };
  __iced_k = __iced_k_noop = function() {};

  parser = new DOMParser();

  URL_CONST = {
    'login': 'https://learn.tsinghua.edu.cn/MultiLanguage/lesson/teacher/loginteacher.jsp',
    'course': 'http://learn.tsinghua.edu.cn/MultiLanguage/lesson/student/MyCourse.jsp',
    'course_all': 'http://learn.tsinghua.edu.cn/MultiLanguage/lesson/student/MyCourse.jsp?typepage=2',
    'notification': 'https://learn.tsinghua.edu.cn/MultiLanguage/public/bbs/getnoteid_student.jsp',
    'course_info': 'https://learn.tsinghua.edu.cn/MultiLanguage/lesson/student/course_info.jsp',
    'file': 'https://learn.tsinghua.edu.cn/MultiLanguage/lesson/student/download.jsp',
    'resource': 'https://learn.tsinghua.edu.cn/MultiLanguage/lesson/student/ware_list.jsp',
    'deadline': 'https://learn.tsinghua.edu.cn/MultiLanguage/lesson/student/hom_wk_brw.jsp',
    'mentor': 'https://learn.tsinghua.edu.cn/MultiLanguage/public/bbs/getbbsid_student.jsp',
    'discuss': 'https://learn.tsinghua.edu.cn/MultiLanguage/public/bbs/gettalkid_student.jsp',
    'course_page': 'https://learn.tsinghua.edu.cn/MultiLanguage/lesson/student/course_locate.jsp',
    'deadline_detail': 'http://learn.tsinghua.edu.cn/MultiLanguage/lesson/student/hom_wk_detail.jsp',
    'deadline_submit': 'http://learn.tsinghua.edu.cn/MultiLanguage/lesson/student/hom_wk_submit.jsp',
    'deadline_review': 'http://learn.tsinghua.edu.cn/MultiLanguage/lesson/student/hom_wk_view.jsp'
  };

  CONST = {
    'version': window.getManifest().version,
    'featureName': ['deadline', 'notification', 'file'],
    'GUIListName': {
      'deadline': '#nearby-deadline',
      'notification': '#category-heading',
      'file': '#file-heading'
    },
    'cacheListName': {
      'courseList': 'course_list',
      'deadline': 'deadline_list',
      'notification': 'notification_list',
      'file': 'file_list'
    },
    'ignoreListName': {
      'deadline': 'ignore_list_deadline',
      'notification': 'ignore_list_notification',
      'file': 'ignore_list_file'
    },
    'changeState': {
      'unread': {
        'read': 'readed',
        'star': 'stared'
      },
      'readed': {
        'read': 'readed',
        'star': 'stared'
      },
      'stared': {
        'read': 'stared',
        'star': 'readed'
      }
    }
  };

  errorEnum = ['noToken', 'netFail'];

  state = {
    tabId: null
  };

  chrome.extension.onMessage.addListener(function(feeds, sender, sendResponse) {
    chrome.tabs.create({
      'url': feeds.url
    }, function(tab) {
      return state.tabId = tab.id;
    });
    return sendResponse();
  });

  errorHandler = function(type) {
    return chrome.tabs.sendMessage(state.tabId, {
      'type': type
    });
  };

  net_login = function(successCall) {
    var password, username;
    username = db_getUsername();
    password = db_getPassword();
    if (!username || !password) {
      errorHandler('noToken');
      return;
    }
    return $.post(URL_CONST['login'], {
      'userid': username,
      'userpass': password
    }, function(data) {
      return window.setTimeout(successCall, 1000);
    }).fail(errorHandler('netFail'));
  };

  old_db_getUsername = function() {
    return localStorage.getItem('learn_username', '');
  };

  old_db_getPassword = function() {
    var password;
    password = localStorage.getItem('learn_encrypt_password', '');
    if (!password) return password;
    return sjcl.decrypt("LEARNpassword", password);
  };

  db_getUsername = function() {};

  net_getCourseList = function(callback) {
    return $.get(URL_CONST['course'], function(data) {
      var courseDocument, courseList;
      courseDocument = parser.parseFromString(data, 'text/html');
      courseList = courseDocument.querySelectorAll('#info_1 a');
      courseList = Array.prototype.slice.call(courseList);
      return db_updateCourseList(courseList, callback);
    }).fail(errorHandler('netFail'));
  };

  net_submitServer = function() {};

  db_set = function(key, value, callback) {
    var tmp;
    tmp = {};
    tmp[key] = value;
    return chrome.storage.local.set(tmp, callback);
  };

  db_get = function(key, defaultValue, callback) {
    return chrome.storage.local.get(key, function(result) {
      if (result[key] === void 0) callback(defaultValue);
      return callback(result[key]);
    });
  };

  db_set('a', 'b');

  (function(__iced_k) {
    __iced_deferrals = new iced.Deferrals(__iced_k, {
      filename: "background.iced"
    });
    db_get('d', 'c', __iced_deferrals.defer({
      assign_fn: (function() {
        return function() {
          return result = arguments[0];
        };
      })(),
      lineno: 111
    }));
    __iced_deferrals._fulfill();
  })(function() {
    console.log(result);
    db_fixOldMess = function() {
      var TC, d, item, passwordTemp, ___iced_passed_deferral, __iced_deferrals, __iced_k, _i, _j, _len, _len1,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      if (version_control('check', 1)) {
        passwordTemp = localStorage.getItem('learn_passwd');
        if (passwordTemp) {
          localStorage.removeItem('learn_passwd');
          old_db_saveToken(old_db_getUsername(), passwordTemp);
        }
        version_control('set', 1);
      }
      if (version_control('check', 2)) {
        d = localStorage.getItem('deadline_list');
        if (d) {
          d = JSON.parse(d);
          for (_i = 0, _len = d.length; _i < _len; _i++) {
            item = d[_i];
            if (d[item].type) break;
            d[item].type = 'd';
            d[item].id = d[item].deadlineId;
          }
          d = JSON.stringify(d);
          localStorage.setItem('deadline_list', d);
        }
        d = localStorage.getItem('notification_list');
        if (d) {
          d = JSON.parse(d);
          for (_j = 0, _len1 = d.length; _j < _len1; _j++) {
            item = d[_j];
            if (d[item].type) break;
            d[item].type = 'n';
          }
          d = JSON.stringify(d);
          localStorage.setItem('notification_list', d);
        }
        d = localStorage.getItem('file_list');
        version_control('set', 2);
      }
      if (version_control('check', 3)) {
        d = localStorage.getItem('deadline_list');
        (function(__iced_k) {
          var _k, _len2;
          if (d) {
            d = JSON.parse(d);
            for (_k = 0, _len2 = d.length; _k < _len2; _k++) {
              item = d[_k];
              temp[item] = d[item];
              temp[item].start = new Date(temp[item].start);
              temp[item].end = new Date(temp[item].end);
            }
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "background.iced",
                funcname: "db_fixOldMess"
              });
              db_set('deadline_list', temp, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return TC = arguments[0];
                  };
                })(),
                lineno: 154
              }));
              __iced_deferrals._fulfill();
            })(__iced_k);
          } else {
            return __iced_k();
          }
        })(function() {
          d = localStorage.getItem('notification_list');
          (function(__iced_k) {
            var _k, _len2;
            if (d) {
              d = JSON.parse(d);
              for (_k = 0, _len2 = d.length; _k < _len2; _k++) {
                item = d[_k];
                temp[item] = d[item];
                temp[item].day = new Date(temp[item].day);
              }
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "background.iced",
                  funcname: "db_fixOldMess"
                });
                db_set('notification_list', temp, __iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return TC = arguments[0];
                    };
                  })(),
                  lineno: 161
                }));
                __iced_deferrals._fulfill();
              })(__iced_k);
            } else {
              return __iced_k();
            }
          })(function() {
            d = localStorage.getItem('file_list');
            (function(__iced_k) {
              var _k, _len2;
              if (d) {
                d = JSON.parse(d);
                for (_k = 0, _len2 = d.length; _k < _len2; _k++) {
                  item = d[_k];
                  temp[item] = d[item];
                  temp[item].day = new Date(temp[item].day);
                }
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "background.iced",
                    funcname: "db_fixOldMess"
                  });
                  db_set('file_list', temp, __iced_deferrals.defer({
                    assign_fn: (function() {
                      return function() {
                        return TC = arguments[0];
                      };
                    })(),
                    lineno: 168
                  }));
                  __iced_deferrals._fulfill();
                })(__iced_k);
              } else {
                return __iced_k();
              }
            })(function() {
              db_saveToken(old_db_getUsername, old_db_getPassword);
              return __iced_k(version_control('set', 3));
            });
          });
        });
      } else {
        return __iced_k();
      }
    };
    version_control = function(op, version) {
      var cur;
      if (op === 'check') {
        cur = localStorage.getItem('learn_version_flag', '0');
        if (version > cur) {
          return true;
        } else {
          return false;
        }
      }
      if (op === 'set') return localStorage.setItem('learn_version_flag', version);
    };
    db_updateCourseList = function(courseList, args) {
      var db_courseList, i, id, name, _i, _ref;
      db_courseList = [];
      for (i = _i = 0, _ref = courseList.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        id = getURLParamters(courseList[i].getAttribute('href')).course_id;
        name = $.trim(courseList[i].innerText);
        name = name.match(/^(.*)\s*\([^(]*\)\s*\([^(]*\)$/)[1];
        db_courseList.push({
          'id': id,
          'name': name
        });
      }
      localStorage.course_list = JSON.stringify(db_courseList);
      if (args) return args(db_courseList);
    };
    old_db_saveToken = function(username, password) {
      var encryptPassword;
      localStorage.setItem('learn_username', username);
      encryptPassword = sjcl.encrypt("LEARNpassword", password);
      return localStorage.setItem('learn_encrypt_password', encryptPassword);
    };
    return db_saveToken = function(username, password) {
      var TC, encryptPassword, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "background.iced",
          funcname: "db_saveToken"
        });
        db_set('learn_username', username, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return TC = arguments[0];
            };
          })(),
          lineno: 201
        }));
        __iced_deferrals._fulfill();
      })(function() {
        encryptPassword = sjcl.encrypt("LEARNpassword", password);
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "background.iced",
          funcname: "db_saveToken"
        });
        db_set('learn_encrypt_password', encryptPassword, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return TC = arguments[0];
            };
          })(),
          lineno: 202
        }));
        __iced_deferrals._fulfill();
      });
    };
  });

}).call(this);
